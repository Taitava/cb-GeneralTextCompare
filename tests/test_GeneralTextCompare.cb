
// These tests are copied 2021-03-09 from http://developforperformance.com/MatchingWildcards_AnImprovedAlgorithmForBigData.html And modified For Coolbasic & cbUnit by Jarkko Linnanvirta.
// The tests can be run with cbUnit: https://github.com/Taitava/cbUnit
//
// Copyright and license of the original tests:
//
// Copyright 2018 IBM Corporation
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

Include "PatternCompare.cb"

Function test_Wild()
	
	// Case with first wildcard After total match.
	AssertPatternCompare("Hi", "Hi*", True)
	
	// Case with mismatch After '*'
	AssertPatternCompare("abc", "ab*d", False)
	
	// Cases with repeating character sequences.
	AssertPatternCompare("abcccd", "*ccd", True)
	AssertPatternCompare("mississipissippi", "*issip*ss*", True)
	AssertPatternCompare("xxxx*zzzzzzzzy*f", "xxxx*zzy*fffff", False)
	AssertPatternCompare("xxxx*zzzzzzzzy*f", "xxx*zzy*f", True)
	AssertPatternCompare("xxxxzzzzzzzzyf", "xxxx*zzy*fffff", False)
	AssertPatternCompare("xxxxzzzzzzzzyf", "xxxx*zzy*f", True)
	AssertPatternCompare("xyxyxyzyxyz", "xy*z*xyz", True)
	AssertPatternCompare("mississippi", "*sip*", True)
	AssertPatternCompare("xyxyxyxyz", "xy*xyz", True)
	AssertPatternCompare("mississippi", "mi*sip*", True)
	AssertPatternCompare("ababac", "*abac*", True)
	AssertPatternCompare("ababac", "*abac*", True)
	AssertPatternCompare("aaazz", "a*zz*", True)
	AssertPatternCompare("a12b12", "*12*23", False)
	AssertPatternCompare("a12b12", "a12b", False)
	AssertPatternCompare("a12b12", "*12*12*", True)
	
	// From DDJ reader Andy Belf
	AssertPatternCompare("caaab", "*a?b", True)
	
	// Additional cases where the '*' char appears in the tame string.
	AssertPatternCompare("*", "*", True)
	AssertPatternCompare("a*abab", "a*b", True)
	AssertPatternCompare("a*r", "a*", True)
	AssertPatternCompare("a*ar", "a*aar", False)

	// More double wildcard scenarios.
	AssertPatternCompare("XYXYXYZYXYz", "XY*Z*XYz", True)
	AssertPatternCompare("missisSIPpi", "*SIP*", True)
	AssertPatternCompare("mississipPI", "*issip*PI", True)
	AssertPatternCompare("xyxyxyxyz", "xy*xyz", True)
	AssertPatternCompare("miSsissippi", "mi*sip*", True)
	AssertPatternCompare("miSsissippi", "mi*Sip*", False)
	AssertPatternCompare("abAbac", "*Abac*", True)
	AssertPatternCompare("abAbac", "*Abac*", True)
	AssertPatternCompare("aAazz", "a*zz*", True)
	AssertPatternCompare("A12b12", "*12*23", False)
	AssertPatternCompare("a12B12", "*12*12*", True)
	AssertPatternCompare("oWn", "*oWn*", True)

	// Completely tame (no wildcards) cases.
	AssertPatternCompare("bLah", "bLah", True)
	AssertPatternCompare("bLah", "bLaH", False)

	// Simple mixed wildcard tests suggested by Marlin Deckert.
	AssertPatternCompare("a", "*?", True)
	AssertPatternCompare("ab", "*?", True)
	AssertPatternCompare("abc", "*?", True)

	// More mixed wildcard tests including coverage for False positives.
	AssertPatternCompare("a", "??", False)
	AssertPatternCompare("ab", "?*?", True)
	AssertPatternCompare("ab", "*?*?*", True)
	AssertPatternCompare("abc", "?**?*?", True)
	AssertPatternCompare("abc", "?**?*&?", False)
	AssertPatternCompare("abcd", "?b*??", True)
	AssertPatternCompare("abcd", "?a*??", False)
	AssertPatternCompare("abcd", "?**?c?", True)
	AssertPatternCompare("abcd", "?**?d?", False)
	AssertPatternCompare("abcde", "?*b*?*d*?", True)

	// Single-character-match cases.
	AssertPatternCompare("bLah", "bL?h", True)
	AssertPatternCompare("bLaaa", "bLa?", False)
	AssertPatternCompare("bLah", "bLa?", True)
	AssertPatternCompare("bLaH", "?Lah", False)
	AssertPatternCompare("bLaH", "?LaH", True)

	// Many-wildcard scenarios.
	AssertPatternCompare("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", "a*a*a*a*a*a*aa*aaa*a*a*b", True)
	AssertPatternCompare("abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", "*a*b*ba*ca*a*aa*aaa*fa*ga*b*", True)
	AssertPatternCompare("abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", "*a*b*ba*ca*a*x*aaa*fa*ga*b*", False)
	AssertPatternCompare("abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", "*a*b*ba*ca*aaaa*fa*ga*gggg*b*", False)
	AssertPatternCompare("abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", "*a*b*ba*ca*aaaa*fa*ga*ggg*b*", True)
	AssertPatternCompare("aaabbaabbaab", "*aabbaa*a*", True)
	AssertPatternCompare("a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*", "a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*", True)
	AssertPatternCompare("aaaaaaaaaaaaaaaaa", "*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*", True)
	AssertPatternCompare("aaaaaaaaaaaaaaaa", "*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*", False)
	AssertPatternCompare("abc*abcd*abcde*abcdef*abcdefg*abcdefgh*abcdefghi*abcdefghij*abcdefghijk*abcdefghijkl*abcdefghijklm*abcdefghijklmn", "abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*", False)
	AssertPatternCompare("abc*abcd*abcde*abcdef*abcdefg*abcdefgh*abcdefghi*abcdefghij*abcdefghijk*abcdefghijkl*abcdefghijklm*abcdefghijklmn", "abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*", True)
	AssertPatternCompare("abc*abcd*abcd*abc*abcd", "abc*abc*abc*abc*abc", False)
	AssertPatternCompare("abc*abcd*abcd*abc*abcd*abcd*abc*abcd*abc*abc*abcd", "abc*abc*abc*abc*abc*abc*abc*abc*abc*abc*abcd", True)
	AssertPatternCompare("abc", "********a********b********c********", True)
	AssertPatternCompare("********a********b********c********", "abc", False)
	AssertPatternCompare("abc", "********a********b********b********", False)
	AssertPatternCompare("*abc*", "***a*b*c***", True)

	// A case-insensitive algorithm test.
	AssertPatternCompare("mississippi", "*issip*PI", True, False)

	// Tests suggested by other DDJ readers
	AssertPatternCompare("", "?", False)
	AssertPatternCompare("", "*?", False)
	AssertPatternCompare("", "", True)
	AssertPatternCompare("a", "", False)
EndFunction

Function test_Tame()
	
	// Case with last character mismatch.
	AssertPatternCompare("abc", "abd", False)

	// Cases with repeating character sequences.
	AssertPatternCompare("abcccd", "abcccd", True)
	AssertPatternCompare("mississipissippi", "mississipissippi", True)
	AssertPatternCompare("xxxxzzzzzzzzyf", "xxxxzzzzzzzzyfffff", False)
	AssertPatternCompare("xxxxzzzzzzzzyf", "xxxxzzzzzzzzyf", True)
	AssertPatternCompare("xxxxzzzzzzzzyf", "xxxxzzy.fffff", False)
	AssertPatternCompare("xxxxzzzzzzzzyf", "xxxxzzzzzzzzyf", True)
	AssertPatternCompare("xyxyxyzyxyz", "xyxyxyzyxyz", True)
	AssertPatternCompare("mississippi", "mississippi", True)
	AssertPatternCompare("xyxyxyxyz", "xyxyxyxyz", True)
	AssertPatternCompare("m ississippi", "m ississippi", True)
	AssertPatternCompare("ababac", "ababac?", False)
	AssertPatternCompare("dababac", "ababac", False)
	AssertPatternCompare("aaazz", "aaazz", True)
	AssertPatternCompare("a12b12", "1212", False)
	AssertPatternCompare("a12b12", "a12b", False)
	AssertPatternCompare("a12b12", "a12b12", True)

	// A mix of cases
	AssertPatternCompare("n", "n", True)
	AssertPatternCompare("aabab", "aabab", True)
	AssertPatternCompare("ar", "ar", True)
	AssertPatternCompare("aar", "aaar", False)
	AssertPatternCompare("XYXYXYZYXYz", "XYXYXYZYXYz", True)
	AssertPatternCompare("missisSIPpi", "missisSIPpi", True)
	AssertPatternCompare("mississipPI", "mississipPI", True)
	AssertPatternCompare("xyxyxyxyz", "xyxyxyxyz", True)
	AssertPatternCompare("miSsissippi", "miSsissippi", True)
	AssertPatternCompare("miSsissippi", "miSsisSippi", False)
	AssertPatternCompare("abAbac", "abAbac", True)
	AssertPatternCompare("abAbac", "abAbac", True)
	AssertPatternCompare("aAazz", "aAazz", True)
	AssertPatternCompare("A12b12", "A12b123", False)
	AssertPatternCompare("a12B12", "a12B12", True)
	AssertPatternCompare("oWn", "oWn", True)
	AssertPatternCompare("bLah", "bLah", True)
	AssertPatternCompare("bLah", "bLaH", False)

	// Single '?' cases.
	AssertPatternCompare("a", "a", True)
	AssertPatternCompare("ab", "a?", True)
	AssertPatternCompare("abc", "ab?", True)

	// Mixed '?' cases.
	AssertPatternCompare("a", "??", False)
	AssertPatternCompare("ab", "??", True)
	AssertPatternCompare("abc", "???", True)
	AssertPatternCompare("abcd", "????", True)
	AssertPatternCompare("abc", "????", False)
	AssertPatternCompare("abcd", "?b??", True)
	AssertPatternCompare("abcd", "?a??", False)
	AssertPatternCompare("abcd", "??c?", True)
	AssertPatternCompare("abcd", "??d?", False)
	AssertPatternCompare("abcde", "?b?d*?", True)

	// Longer string scenarios.
	AssertPatternCompare("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", True)
	AssertPatternCompare("abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", "abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", True)
	AssertPatternCompare("abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", "abababababababababababababababababababaacacacacacacacadaeafagahaiajaxalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", False)
	AssertPatternCompare("abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", "abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaggggagaaaaaaaab", False)
	AssertPatternCompare("abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", "abababababababababababababababababababaacacacacacacacadaeafagahaiajakalaaaaaaaaaaaaaaaaaffafagaagggagaaaaaaaab", True)
	AssertPatternCompare("aaabbaabbaab", "aaabbaabbaab", True)
	AssertPatternCompare("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", True)
	AssertPatternCompare("aaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaa", True)
	AssertPatternCompare("aaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaa", False)
	AssertPatternCompare("abcabcdabcdeabcdefabcdefgabcdefghabcdefghiabcdefghijabcdefghijkabcdefghijklabcdefghijklmabcdefghijklmn", "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc", False)
	AssertPatternCompare("abcabcdabcdeabcdefabcdefgabcdefghabcdefghiabcdefghijabcdefghijkabcdefghijklabcdefghijklmabcdefghijklmn", "abcabcdabcdeabcdefabcdefgabcdefghabcdefghiabcdefghijabcdefghijkabcdefghijklabcdefghijklmabcdefghijklmn", True)
	AssertPatternCompare("abcabcdabcdabcabcd", "abcabc?abcabcabc", False)
	AssertPatternCompare("abcabcdabcdabcabcdabcdabcabcdabcabcabcd", "abcabc?abc?abcabc?abc?abc?bc?abc?bc?bcd", True)
	AssertPatternCompare("?abc?", "?abc?", True)
EndFunction

Function test_Empty()
	
	// A simple case
	AssertPatternCompare("", "abd", False)

	// Cases with repeating character sequences
	AssertPatternCompare("", "abcccd", False)
	AssertPatternCompare("", "mississipissippi", False)
	AssertPatternCompare("", "xxxxzzzzzzzzyfffff", False)
	AssertPatternCompare("", "xxxxzzzzzzzzyf", False)
	AssertPatternCompare("", "xxxxzzy.fffff", False)
	AssertPatternCompare("", "xxxxzzzzzzzzyf", False)
	AssertPatternCompare("", "xyxyxyzyxyz", False)
	AssertPatternCompare("", "mississippi", False)
	AssertPatternCompare("", "xyxyxyxyz", False)
	AssertPatternCompare("", "m ississippi", False)
	AssertPatternCompare("", "ababac*", False)
	AssertPatternCompare("", "ababac", False)
	AssertPatternCompare("", "aaazz", False)
	AssertPatternCompare("", "1212", False)
	AssertPatternCompare("", "a12b", False)
	AssertPatternCompare("", "a12b12", False)

	// A mix of cases
	AssertPatternCompare("", "n", False)
	AssertPatternCompare("", "aabab", False)
	AssertPatternCompare("", "ar", False)
	AssertPatternCompare("", "aaar", False)
	AssertPatternCompare("", "XYXYXYZYXYz", False)
	AssertPatternCompare("", "missisSIPpi", False)
	AssertPatternCompare("", "mississipPI", False)
	AssertPatternCompare("", "xyxyxyxyz", False)
	AssertPatternCompare("", "miSsissippi", False)
	AssertPatternCompare("", "miSsisSippi", False)
	AssertPatternCompare("", "abAbac", False)
	AssertPatternCompare("", "abAbac", False)
	AssertPatternCompare("", "aAazz", False)
	AssertPatternCompare("", "A12b123", False)
	AssertPatternCompare("", "a12B12", False)
	AssertPatternCompare("", "oWn", False)
	AssertPatternCompare("", "bLah", False)
	AssertPatternCompare("", "bLaH", False)

	// Both strings empty
	AssertPatternCompare("", "", True)

	// Another simple case
	AssertPatternCompare("abc", "", False)

	// Cases with repeating character sequences.
	AssertPatternCompare("abcccd", "", False)
	AssertPatternCompare("mississipissippi", "", False)
	AssertPatternCompare("xxxxzzzzzzzzyf", "", False)
	AssertPatternCompare("xxxxzzzzzzzzyf", "", False)
	AssertPatternCompare("xxxxzzzzzzzzyf", "", False)
	AssertPatternCompare("xxxxzzzzzzzzyf", "", False)
	AssertPatternCompare("xyxyxyzyxyz", "", False)
	AssertPatternCompare("mississippi", "", False)
	AssertPatternCompare("xyxyxyxyz", "", False)
	AssertPatternCompare("m ississippi", "", False)
	AssertPatternCompare("ababac", "", False)
	AssertPatternCompare("dababac", "", False)
	AssertPatternCompare("aaazz", "", False)
	AssertPatternCompare("a12b12", "", False)
	AssertPatternCompare("a12b12", "", False)
	AssertPatternCompare("a12b12", "", False)

	// A mix of cases
	AssertPatternCompare("n", "", False)
	AssertPatternCompare("aabab", "", False)
	AssertPatternCompare("ar", "", False)
	AssertPatternCompare("aar", "", False)
	AssertPatternCompare("XYXYXYZYXYz", "", False)
	AssertPatternCompare("missisSIPpi", "", False)
	AssertPatternCompare("mississipPI", "", False)
	AssertPatternCompare("xyxyxyxyz", "", False)
	AssertPatternCompare("miSsissippi", "", False)
	AssertPatternCompare("miSsissippi", "", False)
	AssertPatternCompare("abAbac", "", False)
	AssertPatternCompare("abAbac", "", False)
	AssertPatternCompare("aAazz", "", False)
	AssertPatternCompare("A12b12", "", False)
	AssertPatternCompare("a12B12", "", False)
	AssertPatternCompare("oWn", "", False)
	AssertPatternCompare("bLah", "", False)
	AssertPatternCompare("bLah", "", False)
EndFunction

Function AssertPatternCompare(strTame$, strWild$, expected, case_sensitive=1) // NOTE!! Swapped parameter order strTame,strWild vs. strWild,strTame! This is to make it easier to compare with original tests described in http://developforperformance.com/MatchingWildcards_AnImprovedAlgorithmForBigData.html
	Dim not_$ : If Not expected Then not_ = "n"+"ot "
	// TODO: Implement case_sensitive
	Assert(expected=PatternCompare(strWild, strTame), "PatternCompare(a$, b$) should "+not_+"match.", "", strWild,strTame) // TODO: Remove the "" parameter if cbUnit drops the default_message parameter.
EndFunction
